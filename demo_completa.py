#!/usr/bin/env python3
"""
üéØ DEMONSTRA√á√ÉO COMPLETA - PORT SCANNER
Este script demonstra todas as funcionalidades do Port Scanner
"""

import subprocess
import sys
import time
import platform
from pathlib import Path

def print_header(title):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "="*60)
    print(f"üéØ {title}")
    print("="*60)

def print_step(step, description):
    """Imprime passo da demonstra√ß√£o"""
    print(f"\nüìç PASSO {step}: {description}")
    print("-" * 40)

def run_command(cmd, description):
    """Executa comando e mostra resultado"""
    print(f"\nüíª Executando: {description}")
    print(f"üìã Comando: {cmd}")
    print("üîÑ Aguarde...")
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print("‚úÖ Sucesso!")
            if result.stdout:
                print("üìÑ Sa√≠da:")
                print(result.stdout[:500] + "..." if len(result.stdout) > 500 else result.stdout)
        else:
            print("‚ùå Erro!")
            print(f"üí• C√≥digo de erro: {result.returncode}")
            if result.stderr:
                print(f"‚ö†Ô∏è Erro: {result.stderr}")
    except subprocess.TimeoutExpired:
        print("‚è∞ Timeout - Comando demorou muito para executar")
    except Exception as e:
        print(f"üí• Erro inesperado: {e}")

def main():
    print_header("DEMONSTRA√á√ÉO COMPLETA DO PORT SCANNER")
    
    project_root = Path(__file__).parent
    print(f"üìç Diret√≥rio do projeto: {project_root}")
    print(f"üñ•Ô∏è Sistema operacional: {platform.system()}")
    print(f"üêç Python: {sys.version.split()[0]}")
    
    # Verificar arquivos principais
    print_step(1, "VERIFICA√á√ÉO DE ARQUIVOS")
    
    files_to_check = [
        "port_scanner.py",
        "gui_scanner.py", 
        "web_frontend/manage.py",
        "README.md",
        "requirements.txt"
    ]
    
    for file in files_to_check:
        file_path = project_root / file
        if file_path.exists():
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} - AUSENTE!")
    
    # Demonstra√ß√£o CLI
    print_step(2, "TESTE DA INTERFACE CLI")
    
    # Teste b√°sico
    run_command(
        "python port_scanner.py 127.0.0.1 --ports 80,443 --timeout 2",
        "Teste b√°sico - localhost portas 80,443"
    )
    
    # Teste com portas comuns
    run_command(
        "python port_scanner.py 8.8.8.8 --ports common --timeout 3",
        "Teste portas comuns - Google DNS"
    )
    
    # Demonstra√ß√£o GUI
    print_step(3, "TESTE DA INTERFACE GUI")
    
    print("üñºÔ∏è A interface GUI ser√° aberta por 5 segundos...")
    print("üí° Feche a janela manualmente ou aguarde timeout")
    
    if platform.system() == "Windows":
        gui_cmd = "timeout /t 5 /nobreak > nul && taskkill /f /im python.exe > nul 2>&1 || python gui_scanner.py"
    else:
        gui_cmd = "timeout 5s python gui_scanner.py || true"
    
    run_command(gui_cmd, "Interface GUI (timeout 5s)")
    
    # Demonstra√ß√£o Web
    print_step(4, "TESTE DA INTERFACE WEB")
    
    print("üåê Verificando se o Django est√° configurado...")
    
    web_dir = project_root / "web_frontend"
    if web_dir.exists():
        print("‚úÖ Diret√≥rio web_frontend encontrado")
        
        # Testar import do Django
        run_command(
            "cd web_frontend && python -c \"import django; print('Django:', django.get_version())\"",
            "Verifica√ß√£o do Django"
        )
        
        # Verificar configura√ß√£o
        run_command(
            "cd web_frontend && python manage.py check",
            "Verifica√ß√£o da configura√ß√£o Django"
        )
        
        print("\nüåê Para testar a interface web:")
        print("   1. cd web_frontend")
        print("   2. python manage.py runserver")
        print("   3. Acesse: http://localhost:8000")
        
    else:
        print("‚ùå Diret√≥rio web_frontend n√£o encontrado!")
    
    # Demonstra√ß√£o de formatos de target
    print_step(5, "TESTE DE FORMATOS DE TARGET")
    
    targets_examples = [
        ("127.0.0.1", "IP √∫nico"),
        ("127.0.0.1,8.8.8.8", "M√∫ltiplos IPs"),
        ("google.com", "Hostname"),
        ("127.0.0.1,google.com", "Misto")
    ]
    
    for target, description in targets_examples:
        run_command(
            f"python port_scanner.py {target} --ports 80 --timeout 2",
            f"Target: {description}"
        )
        time.sleep(1)
    
    # Testes de performance
    print_step(6, "TESTE DE PERFORMANCE")
    
    performance_tests = [
        ("--threads 10 --timeout 5", "Conservativo"),
        ("--threads 50 --timeout 3", "Moderado"),
        ("--threads 100 --timeout 1", "Agressivo")
    ]
    
    for params, mode in performance_tests:
        run_command(
            f"python port_scanner.py 127.0.0.1 --ports 21,22,23,25,53,80,110,443,993,995 {params}",
            f"Performance {mode}"
        )
        time.sleep(1)
    
    # Demonstra√ß√£o de exporta√ß√£o
    print_step(7, "TESTE DE EXPORTA√á√ÉO")
    
    export_formats = ["json", "txt", "csv"]
    
    for fmt in export_formats:
        output_file = f"demo_output.{fmt}"
        run_command(
            f"python port_scanner.py 127.0.0.1 --ports 80,443 --output {output_file} --format {fmt}",
            f"Exporta√ß√£o para {fmt.upper()}"
        )
        
        # Verificar se arquivo foi criado
        if (project_root / output_file).exists():
            print(f"‚úÖ Arquivo {output_file} criado")
            # Mostrar conte√∫do (primeiras linhas)
            try:
                with open(output_file, 'r') as f:
                    content = f.read()[:200]
                    print(f"üìÑ Preview: {content}...")
            except:
                pass
        else:
            print(f"‚ùå Arquivo {output_file} N√ÉO foi criado")
    
    # Resumo final
    print_header("DEMONSTRA√á√ÉO CONCLU√çDA")
    
    print("üéâ Todas as funcionalidades foram testadas!")
    print("\nüìã RESUMO DAS INTERFACES:")
    print("   üåê Web Interface: cd web_frontend && python manage.py runserver")
    print("   üñºÔ∏è GUI Interface: python gui_scanner.py")
    print("   ‚å®Ô∏è CLI Interface: python port_scanner.py --help")
    
    print("\nüí° EXEMPLOS PR√ÅTICOS:")
    print("   # Rede local completa")
    print("   python port_scanner.py 192.168.1.0/24 --ports common")
    print("")
    print("   # Alta performance")
    print("   python port_scanner.py TARGET --threads 200 --timeout 1")
    print("")
    print("   # UDP scan")
    print("   python port_scanner.py 8.8.8.8 --ports 53 --protocol udp")
    
    print("\n‚öñÔ∏è LEMBRE-SE:")
    print("   ‚úÖ Use apenas em redes autorizadas")
    print("   ‚úÖ Respeite rate limits")
    print("   ‚úÖ Use com responsabilidade")
    
    print(f"\nüìÅ Projeto dispon√≠vel em: {project_root}")
    print("üìñ Consulte README_COMPLETE.md para documenta√ß√£o completa")
    
    print("\n" + "="*60)
    print("üõ°Ô∏è DEMONSTRA√á√ÉO FINALIZADA - USE COM RESPONSABILIDADE!")
    print("="*60 + "\n")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Demonstra√ß√£o cancelada pelo usu√°rio!")
    except Exception as e:
        print(f"\n\nüí• Erro na demonstra√ß√£o: {e}")
        print("üìû Reporte este erro se necess√°rio")
